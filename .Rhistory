1+1
addinslist:::addinslistAddin()
library('MASS')
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.linpred
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
## Check
glm(Y ~ X1 + X2, data = dat, family = binomial) ## Should be close to -1.3, log(2), log(2).
## Check EPV
min(sum(dat$Y == 0), sum(dat$Y == 1)) / 2 ## Should be approximately 10.
install.packages("logistf")
glm(Y ~ X1 + X2, data = dat, family = binomial)
glm(Y ~ X1 + X2, data = dat, family = binomial)$parameter
glm(Y ~ X1 + X2, data = dat, family = binomial)$parameters
glm(Y ~ X1 + X2, data = dat, family = binomial)$beta
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
logistif::logistif(Y ~ X1 + X2, data = dat)
logistf::logistf(Y ~ X1 + X2, data = dat)
x<- logistf::logistf(Y ~ X1 + X2, data = dat)
x$coefficients
x$coefficients[2]
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
set.seed(1313)
method1 <- vector()
method2 <- vector()
datalist <- list()
for(i in 1:1000){
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients[2]
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
datalist[i] <- dat
}
method1
method2
calcEPV<- function(dat){
min(sum(dat$Y == 0), sum(dat$Y == 1)) / 2
}
str(datalist)
lapply(X = datalist,FUN = calcEPV())
set.seed(1313)
method1 <- vector()
method2 <- vector()
datalist <- list()
for(i in 1:1000){
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients[2]
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
datalist[[i]] <- dat
}
datalist
lapply(X = datalist,FUN = calcEPV())
lapply(X = datalist,FUN = calcEPV
)
?lapply
sapply(X = datalist,FUN = calcEPV)
simEPVs<- sapply(X = datalist,FUN = calcEPV)
simEPVs
mean(simEPVs-10)
simfunc1<- function(sampsize){
for(i in 1:1000){
dat <- mvrnorm(n = sampsize, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
method1 <- list()
method2 <- list()
datalist <- list()
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient
datalist[[i]] <- dat
}
simEPVs<- sapply(X = datalist,FUN = calcEPV)
return(mean(simEPVs-10))
}
simfunc1(80)
simfunc1(160)
simfunc1(320)
for(i 1 :1000){
cat(i, " \r"); flush.console()
}
for(i in  1 :1000){
cat(i, " \r"); flush.console()
}
totalTs <- ts(data = rawTsMonth[,2],
start = c(2011,1),# start
frequency =12  #months in a year
)
# analyses
library(forecast)
library(knitr)
library(ggplot2)
library(forecast)
library(ggthemes)
library(lubridate)
rawTs <- readRDS("monthlyFbMessage.rds")
totalTs <- ts(data = rawTsMonth[,2],
start = c(2011,1),# start
frequency =12  #months in a year
)
totalTs.adj <- totalTs/monthdays(totalTs)
test.ts <- window(totalTs.adj,
end = c(2015,2))
setwd("C:/Users/Boaz Sobrado/Desktop/boaz/Life/Academic/Utrecht/year2/TimeSeries/assignment2")
rawTs <- readRDS("monthlyFbMessage.rds")
totalTs <- ts(data = rawTsMonth[,2],
start = c(2011,1),# start
frequency =12  #months in a year
)
rawTsMonth <- readRDS("monthlyFbMessage.rds")
totalTs <- ts(data = rawTsMonth[,2],
start = c(2011,1),# start
frequency =12  #months in a year
)
totalTs.adj <- totalTs/monthdays(totalTs)
test.ts <- window(totalTs.adj,
end = c(2015,2))
autoplot(test.ts)
BoxCox.lambda(test.ts)
test.ts %>% BoxCox(lambda = BoxCox.lambda(.))
test.ts %>% BoxCox(lambda = BoxCox.lambda(.)) %>% autoplot
citation(R)
citation("R")
listOfPackages <- c("knitr","ggplot2","forecast","ggthemes","lubridate","padr","Ref","citr","rstudio")
write.bib(listOfPackages, file='rReferences')
library(Ref)
library(citr)
write.bib(listOfPackages, file='rReferences')
library(bibtex)
listOfPackages <- c("knitr","ggplot2","forecast","ggthemes","lubridate","padr","Ref","citr","rstudio","bibtex")
write.bib(listOfPackages, file='rReferences')
naive(test.ts)
accuracy(test.ts,naiveModel)
naiveModel <- naive(test.ts)
accuracy(test.ts,naiveModel)
accuracy(naiveModel,test.ts)
# start with benchmark
naiveModel <- naive(test.ts)
accuracy(test.ts,naiveModel)
totalTs.adj <- totalTs/monthdays(totalTs)
train.ts <- window(totalTs.adj,
end = c(2015,2))
# start with benchmark
naiveModel <- naive(train.ts)
accuracy(totalTs.adj,naiveModel)
totalTs.adj
naiveModel
listOfPackages <- c("dplyr","ggplot2","base","ggthemes","sp1","sp2","pandoc","citr","rstudio","tibbletime")
write.bib(listOfPackages, file='rReferences')
listOfPackages <- c("knitr","ggplot2","forecast","ggthemes","lubridate","padr","tibbletime","citr","rstudio","bibtex")
write.bib(listOfPackages, file='rReferences')
citation("forecast")
listOfPackages <- c("knitr","ggplot2","forecast","ggthemes","lubridate","padr","tibbletime","citr","rstudio","bibtex")
write.bib(listOfPackages, file='rReferences')
citation("Rstudio")
citation("R studio")
citation("rstudio")
citation("RStudio")
citation("R")
citation("e")
citation("r")
listOfPackages <- c("knitr","ggplot2","base","forecast","ggthemes","lubridate","padr","tibbletime","citr","rstudio","bibtex")
write.bib(listOfPackages, file='rReferences')
citations()
references(Rstudio)
reference(Rstudio)
reference("Rstudio")
citation("RStudio")
citation("Rstudio")
citation("base")
listOfPackages <- c("knitr","ggplot2","base","forecast","ggthemes","lubridate","padr","tibbletime","citr","rstudio","bibtex")
write.bib(listOfPackages, file='rReferences')
RStudio.Version()$citation
?accuracy()
test.ts <- window(totalTs,start = c(2015,3))
test.ts
test.ts
test.ts[-13]
test.ts <- window(totalTs,start = c(2015,3),end = c(2016,3))
test.ts
# start with benchmark
naiveModel <- naive(train.ts,h = 12)
accuracy(naiveModel,test.ts)
kable(accuracy(naiveModel,test.ts))
checkresiduals(naiveModel)+theme_tufte()
?meanf()
checkresiduals(meanModel)
checkresiduals(naiveModel)
meanModel <- meanf(train.ts,h = 12)
checkresiduals(meanModel)
etsModel1 <- ets(train.ts)
checkresiduals(e1)
checkresiduals(etsModel1)
etsModel1
etsModel1$par
etsModel1$par[1]
etsModel1$par[[1]]
format(etsModel1$par[[1]],digits = 2)
tsoutliers(train_set)
tsoutliers(train.ts)
train.ts
tsoutliers(train.ts)
tsclean(train.ts)
autoplot(test.ts)
autoplot(totalTs)
autoplot(test.ts)
autoplot(etsModel1)
plot(etsModel1)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(ggplot2)
library(forecast)
library(ggthemes)
library(lubridate)
rawTs <- readRDS("monthlyFbMessage.rds")
etsModel1 <- ets(train.ts)
checkresiduals(etsModel1)
kable(accuracy(etsModel1, test.ts),digits = 2, caption = "Accuracy measures of the ETS model.")
accuracy(etsModel1, test.ts)
citr:::insert_citation()
citr:::insert_citation()
setwd("C:/Users/Boaz Sobrado/Desktop/boaz/Life/Academic/Utrecht/year2/thesisFiles/thesis")
rm(list = ls9)
rm(list = ls())
wordcountaddin:::text_stats()
citr:::insert_citation()
##Graphs for determining where missing data is
library(ggthemes)
library(dplyr)
# read data
loc<- readRDS("..\\all.rds")
pointsdaily<-loc %>% group_by(Day) %>% summarise(count = n())
pointshourly<-loc %>% group_by(Day, lubridate::hour(time)) %>%
summarise(count=n())
rm(loc)
colnames(pointshourly) <- c("Day","Hour","count")
#generate dates
x<-as.Date(pointsdaily$Day[1]):as.Date(pointsdaily$Day[nrow(pointsdaily)])
x<-as.Date.numeric(x = x,origin="1970-01-01")
h<- sort(rep(0:23,length(x)))
allDayHour <- data.frame(Day = rep(x,24), Hour = h, count = 0)
#dates with zero measurements
noMeasureDay<-as.Date(setdiff(x,pointsdaily$Day), origin = "1970-01-01")
library(padr)
pointsdaily
pointshourly
# read data
loc<- readRDS("..\\all.rds")
head(lod)
head(loc)
unique(loc$who)
loc %>%
filter(who =="boaz")%>%
thicken("day") %>%
group_by(time_day) %>%
summarise(count = n()) %>%
pad() %>%
fill_by_value(value = 0)
?thicken
loc %>%
filter(who =="boaz")%>%
thicken(time,"day") %>%
group_by(time_day) %>%
summarise(count = n()) %>%
pad() %>%
fill_by_value(value = 0)
loc %>%
filter(who =="boaz")
measurmentsDaily<- loc %>%
filter(who =="boaz")%>%
select(time) %>%
thicken("day") %>%
group_by(time_day) %>%
summarise(count = n()) %>%
pad() %>%
fill_by_value(value = 0)
60/5
addinslist:::addinslistAddin()
library(remedy)
