select(clust, predC,time)  %>%
left_join(allPoints,by="clust") %>%
left_join(allPoints,by=c("predC" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T))
t$expDist <-  expDist(model,x_test,distMatrix)
probs <- model %>% predict_proba(as.matrix(x_test))
t$certainty<- apply(X = probs[,-1],MARGIN = 1,max)
nrow(t)
nrow(apply(X = probs[,-1],MARGIN = 1,max))
length(apply(X = probs[,-1],MARGIN = 1,max))
names(t)
certainty<- apply(X = probs[,-1],MARGIN = 1,max)
plot(t$dist,certainty)
length()
length(t$dist)
length(certainty)
str(certainty)
str(t$dist)
plot(t$dist,certainty)
length(t$dist)
length(t$dist)== length(certainty)
length(certainty)
cbind(t$dist,certainty)
t %>% mutate( cer  = certainty)
tempDf <- data.frame(t$dist,certainty)
tempDf <- cbind(t$dist,certainty)
tempDf <- cbind(t$dist,certainty) %>%  as.data.frame()
head(tempDf)
plot(tempDf$V1,tempDf$certainty)
summary(tempDf)
cor(tempDf$V1,tempDf$certainty)
summary(certainty)
plot(certainty)
hist(certainty)
t$expDist <-  expDist(model,x_test,distMatrix)
probs <- model %>% predict_proba(as.matrix(x_test))
dOrdered<- dClustM[,t %>% select(clust) %>% pull()]
expDistance<- diag(probs[,-1] %*% dOrdered)
dClustM <- distMatrix
dOrdered<- dClustM[,t %>% select(clust) %>% pull()]
expDistance<- diag(probs[,-1] %*% dOrdered)
dim(probs[,-1] )
dim(dOrdered)
probs[1,-1]
dim(x_test)
summary(t)
remove_ind_5min<- getRemoveIndex(fin,"5 min")
# missing: the features have to include the fact that they are missing, so they have to be recalcuated
# the extracted ones are wrong!!
testTrain5min<- getTestTrain(fin,remove_ind_5min[[1]])
# get baseline distance measure
testTrain5min[[1]] %>%
select(clust,lagClust) %>%
left_join(allPoints,by="clust") %>%
left_join(allPoints,by=c("lagClust" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
summary()
dataList5min<- getModelInput(test = testTrain5min[[1]], train = testTrain5min[[2]])
x_train <- dataList5min[[1]]
x_test  <- dataList5min[[2]]
y_train <- dataList5min[[3]]
y_test  <- dataList5min[[4]]
remove_ind_5min <- remove_ind_5min[[1]]
# get baseline distance measure
testTrain5min[[1]] %>%
select(clust,lagClust) %>%
left_join(allPoints,by="clust") %>%
left_join(allPoints,by=c("lagClust" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
summary()
nClust
dim(y_test)
dim(y_train)
fin %>% select(clust) %>% unique() %>% length()
fin %>% select(clust) %>% unique() %>% nrow()
nClust <- 1222
model <- keras_model_sequential()
model %>%
layer_dense(units = 250, activation = 'relu', input_shape = ncol(x_test)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 120, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = nClust, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
str(remove_ind_5min)
remove_ind_5min<- getRemoveIndex(fin,"5 min")
str(remove_ind_5min)
nClust <- 1222
model <- keras_model_sequential()
model %>%
layer_dense(units = 250, activation = 'relu', input_shape = ncol(x_test)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 120, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = nClust, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
model %>% fit(
as.matrix(x_train), as.matrix(y_train),
epochs = 10, batch_size = 200,
validation_split = 0.2
)
#plot(history)
model %>% evaluate(as.matrix(x_test),as.matrix(y_test)) #88 percent accuracy
# distance matrix of all clusters
distMatrix<- geosphere::distm(allPoints[,c("lon","lat")])
t<- fin %>% slice(remove_ind_5min[[1]])
#t <- t[-c(1,nrow(t)),] #remove first and due to the feature extraction loss using lead and lag
t<- t %>% mutate(
predC = as.integer(model %>% predict_classes(as.matrix(x_test)))) %>%
select(clust, predC,time)  %>%
left_join(allPoints,by="clust") %>%
left_join(allPoints,by=c("predC" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T))
t$expDist <-  expDist(model,x_test,distMatrix)
probs <- model %>% predict_proba(as.matrix(x_test))
certainty<- apply(X = probs[,-1],MARGIN = 1,max)
summary(certainty) # 0.07 to 0.18, median 0.12
tempDf <- cbind(t$dist,certainty) %>%  as.data.frame()
plot(tempDf$V1,tempDf$certainty)
summary(t)
t<- fin %>% slice(remove_ind_5min[[1]])
head(t)
allPoints$clust %>% unique() %>% length()
fin$clust %>% unique() %>% length()
allPoints <- readRDS("finalAllClusts2.rds")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
allPoints <- readRDS("finalAllClusts2.rds")
allPoints %>% select(clusts ) %>% unique() %>% length()
allPoints %>% select(clust) %>% unique() %>% length()
allPoints
allPoints %>% select(clust) %>% unique() %>% nrow()
certainty
summary(certainty)
r_refs(file = "r-references.bib")
library(papaja)
r_refs(file = "r-references.bib")
my_citations <- cite_r(file = "r-references.bib", footnote = TRUE)
my_citations
confidence
t
certainty<- apply(X = probs[,-1],MARGIN = 1,max)
summary(certainty)
hist(certainty)
plot(certainty)
# objective data comparison
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readr)
objLog<- read_csv2("objectiveLog.csv")
objKey<- read_csv2("objectiveKey.csv") %>% select(Location,Cluster)
objKey<- left_join(objKey,allPoints, by = c("Cluster" = "clust")) %>% select(Location,Cluster,lon,lat)
objLog <- objLog %>%
mutate( time = as.POSIXct(paste(Date, Time), format="%d-%m-%Y %H:%M:%S")) %>%
as_tbl_time(time)
objLog <- left_join(objLog,objKey)
# compare MYMETHOD to the objective data
Sys.time()# 15:02:03
test<- objLog %>% mutate(timestampMs = as.numeric(time), clust = Cluster)
seconds_in_day <-  24*60*60
test<- test %>%
select(time,timestampMs,clust) %>%
mutate( day  = strftime(time,"%u"),
month = strftime(time,"%m"),
secMidnight = lubridate::period_to_seconds(lubridate::hms(strftime(time,"%T"))),
sinTime = sin(2*pi*secMidnight/seconds_in_day),
cosTime = cos(2*pi*secMidnight/seconds_in_day),
nextMeas = NA,
prevMeas = NA,
lagClust = NA,
leadClust = NA,
timestampLast = NA,
timestampNext = NA,
clustNext = NA,
clustPrev = NA,
isMissing = 1)
train<- fin %>%
select(time,timestampMs,clust) %>%
mutate( day  = strftime(time,"%u"),
month = strftime(time,"%m"),
secMidnight = lubridate::period_to_seconds(lubridate::hms(strftime(time,"%T"))),
sinTime = sin(2*pi*secMidnight/seconds_in_day),
cosTime = cos(2*pi*secMidnight/seconds_in_day),
nextMeas = as.numeric(lead(timestampMs)-timestampMs),
prevMeas = as.numeric(timestampMs-lag(timestampMs)),
lagClust = lag(clust),
leadClust = lead(clust),
timestampLast = as.numeric(time),
timestampNext = as.numeric(time),
clustNext = clust,
clustPrev = clust,
isMissing = 0)
all <- rbind(train,test) %>%
arrange(timestampMs) %>%
fill(timestampLast,clustPrev, .direction = "down") %>%
fill(timestampNext,clustNext, .direction = "up") %>%
mutate( prevMeas = timestampMs - timestampLast,
nextMeas = timestampNext - timestampMs,
lagClust = clustPrev,
leadClust = clustNext) %>%
mutate(nextMeas = scales::rescale(nextMeas),
prevMeas = scales::rescale(prevMeas))
test <- all %>% filter(isMissing == 1)
train <- all %>% filter(isMissing == 0)
test <- test %>% na.omit()# remove first and previous lag difference
train <- train %>% na.omit()# remove first and previous lag difference
cat(paste0("Baseline model previous Clust is: ", test %>% summarise(mean(clust == lagClust))))
test %>%
select(clust,lagClust) %>%
left_join(allPoints,by="clust") %>%
left_join(allPoints,by=c("lagClust" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
summary()
38/97
18/97
remove_ind_day<- getRemoveIndexDay(fin, seed = 1115)
fin %>% filter(clust == 49)
fin %>% filter(clust == 49) %>%
summarise(lon = mean(lon), lat = mean(lat))
fin %>% filter(clust == 49) %>%
summarise(lon = mean(lon), lat = mean(lat)) %>%
leaflet() %>%
addTiles() %>%
addCircles()
allP2<- fin %>% group_by(clust) %>%
summarise(lon = mean(lon), lat = mean(lat))
remove_ind_day[[1]]
fin %>% slice(remove_ind_day[[1]]) %>%
select(lon, lat, clust)
fin %>% slice(remove_ind_day[[1]]) %>%
select(time,clust) %>%
left_join(allP2,by="clust")
fin %>% slice(remove_ind_day[[1]]) %>%
select(time,clust) %>%
left_join(allP2,by="clust") %>%
mutate(clust2 = 49)%>%
left_join(allP2,by=c("clust2" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
summary()
fin %>% slice(remove_ind_day[[1]]) %>%
summarise(mean(clust == 49))
fin %>% slice(remove_ind_day[[1]]) %>%
summarise(mean(clust == 49))
fin %>% slice(remove_ind_day[[1]]) %>%
select(time,clust) %>%
left_join(allP2,by="clust") %>%
mutate(clust2 = 49)%>%
left_join(allP2,by=c("clust2" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
thicken("5 min","weight5min") %>%
group_by(weight5min) %>%
summarise(m = mean(dist)) %>% summarise(mean = mean(m),
median = median(m))
fin %>% slice(remove_ind_hour[[1]]) %>%
select(time,clust) %>%
left_join(allP2,by="clust") %>%
mutate(clust2 = 49)%>%
left_join(allP2,by=c("clust2" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
thicken("5 min","weight5min") %>%
group_by(weight5min) %>%
summarise(m = mean(dist)) %>% summarise(mean = mean(m),
median = median(m))
fin %>% slice(remove_ind_5min[[1]]) %>%
select(time,clust) %>%
left_join(allP2,by="clust") %>%
mutate(clust2 = 49)%>%
left_join(allP2,by=c("clust2" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
thicken("5 min","weight5min") %>%
group_by(weight5min) %>%
summarise(m = mean(dist)) %>% summarise(mean = mean(m),
median = median(m))
fin %>% slice(remove_ind_5min[[1]]) %>%
select(time,clust) %>%
left_join(allP2,by="clust") %>%
mutate(clust2 = 49)%>%
left_join(allP2,by=c("clust2" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
thicken("5 min","weight5min") %>%
group_by(weight5min) %>%
summarise(m = mean(dist)) %>% pull(m) %>% hist()
fin %>% slice(remove_ind_5min[[1]]) %>%
select(time,clust) %>%
left_join(allP2,by="clust") %>%
mutate(clust2 = 49)%>%
left_join(allP2,by=c("clust2" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
thicken("5 min","weight5min") %>%
group_by(weight5min) %>%
summarise(m = mean(dist)) %>% pull(m) %>% plot()
fin %>% slice(remove_ind_5min[[1]]) %>%
select(time,clust) %>%
left_join(allP2,by="clust") %>%
mutate(clust2 = 49)%>%
left_join(allP2,by=c("clust2" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
thicken("5 min","weight5min") %>%
group_by(weight5min) %>%
summarise(m = mean(dist)) %>% pull(m) %>% boxplot()
head(t3)
model3
remove_ind_day<- getRemoveIndexDay(fin, seed = 1115)
testTrainDay<- getTestTrain(fin,remove_ind_day[[1]])
dataListDay<- getModelInput(test = testTrainDay[[1]], train = testTrainDay[[2]])
# get the baseline naive model's dist measures
testTrainDay[[1]] %>%
select(clust,lagClust) %>%
left_join(allPoints,by="clust") %>%
left_join(allPoints,by=c("lagClust" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T)) %>%
summary()
remove_ind_day <- remove_ind_day[[1]]
x_train_day <- dataListDay[[1]]
x_test_day  <- dataListDay[[2]]
y_train_day <- dataListDay[[3]]
y_test_day  <- dataListDay[[4]]
model3 <- keras_model_sequential()
model3 %>%
layer_dense(units = 250, activation = 'relu', input_shape = ncol(x_test_day)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 120, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = nClust, activation = 'softmax')
summary(model3)
model3 %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model3 %>% fit(
as.matrix(x_train_day), as.matrix(y_train_day),
epochs = 10, batch_size = 200,
validation_split = 0.2
)
#plot(history)
model3 %>% evaluate(as.matrix(x_test_day),as.matrix(y_test_day))# accuracy 47.5%
predC = as.integer(model3 %>% predict_classes(as.matrix(x_test_day)))) %>%
select(time,clust, predC)  %>%
left_join(allP2,by="clust") %>%
left_join(allP2,by=c("predC" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T))
fin %>% slice(remove_ind_day) %>% mutate(
predC = as.integer(model3 %>% predict_classes(as.matrix(x_test_day))))
t3<- fin %>% slice(remove_ind_day) %>% mutate(
predC = as.integer(model3 %>% predict_classes(as.matrix(x_test_day)))) %>%
select(time,clust, predC)
t3<- fin %>% slice(remove_ind_day) %>% mutate(
predC = as.integer(model3 %>% predict_classes(as.matrix(x_test_day)))) %>%
select(time,clust, predC)  %>%
left_join(allP2,by="clust") %>%
left_join(allP2,by=c("predC" = "clust"),suffix = c(".clust",".predC"))
t3<- fin %>% slice(remove_ind_day) %>% mutate(
predC = as.integer(model3 %>% predict_classes(as.matrix(x_test_day)))) %>%
select(time,clust, predC)  %>%
left_join(allP2,by="clust") %>%
left_join(allP2,by=c("predC" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit()
t3<- fin %>% slice(remove_ind_day) %>% mutate(
predC = as.integer(model3 %>% predict_classes(as.matrix(x_test_day)))) %>%
select(time,clust, predC)  %>%
left_join(allP2,by="clust") %>%
left_join(allP2,by=c("predC" = "clust"),suffix = c(".clust",".predC")) %>%
na.omit() %>%
mutate( dist = raster::pointDistance(matrix(c(lon.clust,lat.clust),ncol = 2),
matrix(c(lon.predC,lat.predC),ncol = 2),
longlat = T))
t3
t3 %>% summary()
t3 %>% select(clust) %>% pull() %>% plot()
t3 %>% select(clust) %>% summarist(clust == 49)
t3 %>% select(clust) %>% summarise(mean(clust == 49))
t3 %>% thicken("5 min","weight5min") %>%
group_by(weight5min) %>%
summarise(m = mean(dist),
ed = mean(expDist)) %>% summarise(mean = mean(m),
median = median(m),
edmean = mean(ed),
edmedian = median(ed))
fin %>% slice(remove_ind_day[[1]]) %>%
summarise(mean(clust == 49)) #40% accuracy
fin %>% slice(remove_ind_day[[1]]) %>%
summarise(mean(clust == 49)) #40% accuracy
fin %>% slice(remove_ind_day[[1]]) %>%
summarise(mean(clust == 49)) #40% accuracy
fin %>% slice(remove_ind_day[[1]]) %>%
summarise(m = mean(clust == 49)) #40% accuracy
fin %>% slice(remove_ind_day[[1]])
remove_ind_day<- getRemoveIndexDay(fin, seed = 1115)
fin %>% slice(remove_ind_day[[1]]) %>%
summarise(m = mean(clust == 49)) #40% accuracy
fin %>% slice(remove_ind1hr[[1]]) %>%
summarise(m = mean(clust == 49)) #40% accuracy
fin %>% slice(remove_ind1hr) %>%
summarise(m = mean(clust == 49)) #40% accuracy
remove_ind_hour<- getRemoveIndex(fin,"1 hour",seed = 2003)
fin %>% slice(remove_ind1hr[[1]]) %>%
summarise(m = mean(clust == 49)) #40% accuracy
fin %>% slice(remove_ind1hr[[1]])
fin %>% slice(remove_ind_hour[[1]])
fin %>% slice(remove_ind_hr[[1]]) %>%
summarise(m = mean(clust == 49)) #40% accuracy
fin %>% slice(remove_ind_hour[[1]]) %>%
summarise(m = mean(clust == 49)) #40% accuracy
fin %>% slice(remove_ind_5min[[1]]) %>%
summarise(m = mean(clust == 49)) #40% accuracy
resultsDf <- data.frame( mean5min = c(240,43,269,426,5599),
median5min = c(5.9,0,0,0,0),
imputed5min = c("97%","97%","100%","100%","100%"),
mean1hr = c(33,497,908,1502,5667),
median1hr = c(6,4,0,0,0),
imputed1hr = c("88%","89%","100%","100%"),
mean1day = c(62,NA,5757,14266,5757),
median1day = c(6,NA,0,1288,0),
imputed1day = c("85%","0%","100%","100%")
)
resultsDf <- data.frame( mean5min = c(240,43,269,426,5599),
median5min = c(5,9,0,0,0,0),
imputed5min = c("97%","97%","100%","100%","100%"),
mean1hr = c(33,497,908,1502,5667),
median1hr = c(6,4,0,0,0),
imputed1hr = c("88%","89%","100%","100%"),
mean1day = c(62,NA,5757,14266,5757),
median1day = c(6,NA,0,1288,0),
imputed1day = c("85%","0%","100%","100%")
)
resultsDf <- data.frame( mean5min = c(240,43,269,426,5599),
median5min = c(5,9,0,0,0,0),
imputed5min = c("97%","97%","100%","100%","100%"),
mean1hr = c(33,497,908,1502,5667),
median1hr = c(6,4,0,0,0),
imputed1hr = c("88%","89%","100%","100%","100%"),
mean1day = c(62,NA,5757,14266,5757),
median1day = c(6,NA,0,1288,0),
imputed1day = c("85%","0%","100%","100%","100%")
)
resultsDf <- data.frame( mean5min = c(240,43,269,426,5599),
median5min = c(5,9,0,0,0,0),
imputed5min = c("97%","97%","100%","100%","100%"),
mean1hr = c(33,497,908,1502,5667),
median1hr = c(6,4,0,0,0),
imputed1hr = c("88%","89%","100%","100%","100%"),
mean1day = c(62,NA,5757,14266,5757),
median1day = c(6,NA,0,1288,0),
imputed1day = c("85%","0%","100%","100%","100%")
)
resultsDf <- data.frame( mean5min = c(240,43,269,426,5599),
median5min = c(5,9,0,0,0),
imputed5min = c("97%","97%","100%","100%","100%"),
mean1hr = c(33,497,908,1502,5667),
median1hr = c(6,4,0,0,0),
imputed1hr = c("88%","89%","100%","100%","100%"),
mean1day = c(62,NA,5757,14266,5757),
median1day = c(6,NA,0,1288,0),
imputed1day = c("85%","0%","100%","100%","100%")
)
install.packages('staplr', dependencies = TRUE)
library("staplr")
library(staplr)
library(staplr)
devtools::install_github("pridiltal/staplr")
source('~/Desktop/Academic/Utrecht/year2/thesisFiles/thesis/ownAlgo/nnResults.R')
