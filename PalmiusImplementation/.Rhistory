) %>%
fill(t1, .direction ="up")
library(tidyr)
data %>% mutate( t0 = as.numeric(time_5min),
t1 = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ t0)
) %>%
fill(t1, .direction ="up")
data %>% mutate( t0 = as.numeric(time_5min),
missEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ t0),
missStart = missEnd) %>%
fill(missEnd, .direction ="up") %>%
fill(missStart, .direction ="down")
data %>% mutate( timestampMs = as.numeric(time_5min),
tMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ t0),
tMissStart = missEnd,
lonMissEnd =case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ lonF),
lonMissStart = lonMissStart,
latMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ latF),
latMissStart = latMissEnd) %>%
fill(tmissEnd,lonMissEnd,latMissEnd, .direction ="up") %>%
fill(missStart,lonMissStart,latMissStart, .direction ="down")
data %>% mutate( timestampMs = as.numeric(time_5min),
tMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ timestampMs),
tMissStart = missEnd,
lonMissEnd =case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ lonF),
lonMissStart = lonMissStart,
latMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ latF),
latMissStart = latMissEnd) %>%
fill(tmissEnd,lonMissEnd,latMissEnd, .direction ="up") %>%
fill(missStart,lonMissStart,latMissStart, .direction ="down")
data %>% mutate( timestampMs = as.numeric(time_5min),
tMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ timestampMs),
tMissStart = tmissEnd,
lonMissEnd =case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ lonF),
lonMissStart = lonMissStart,
latMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ latF),
latMissStart = latMissEnd) %>%
fill(tmissEnd,lonMissEnd,latMissEnd, .direction ="up") %>%
fill(tmissStart,lonMissStart,latMissStart, .direction ="down")
data %>% mutate( timestampMs = as.numeric(time_5min),
tMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ timestampMs),
tMissStart = tmissEnd,
lonMissEnd =case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ lonF),
lonMissStart = lonMissStart,
latMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ latF),
latMissStart = latMissEnd)
data %>% mutate( timestampMs = as.numeric(time_5min),
tMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ timestampMs),
tMissStart = tMissEnd,
lonMissEnd =case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ lonF),
lonMissStart = lonMissStart,
latMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ latF),
latMissStart = latMissEnd) %>%
fill(tmissEnd,lonMissEnd,latMissEnd, .direction ="up") %>%
fill(tmissStart,lonMissStart,latMissStart, .direction ="down")
data %>% mutate( timestampMs = as.numeric(time_5min),
tMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ timestampMs),
tMissStart = tMissEnd,
lonMissEnd =case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ lonF),
lonMissStart = lonMissEnd,
latMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ latF),
latMissStart = latMissEnd) %>%
fill(tmissEnd,lonMissEnd,latMissEnd, .direction ="up") %>%
fill(tmissStart,lonMissStart,latMissStart, .direction ="down")
data %>% mutate( timestampMs = as.numeric(time_5min),
tMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ timestampMs),
tMissStart = tMissEnd,
lonMissEnd =case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ lonF),
lonMissStart = lonMissEnd,
latMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ latF),
latMissStart = latMissEnd)
data %>% mutate( timestampMs = as.numeric(time_5min),
tMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ timestampMs),
tMissStart = tMissEnd,
lonMissEnd =case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ lonF),
lonMissStart = lonMissEnd,
latMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ latF),
latMissStart = latMissEnd) %>%
fill(tMissEnd,lonMissEnd,latMissEnd, .direction ="up") %>%
fill(tMissStart,lonMissStart,latMissStart, .direction ="down")
?pointDistance
=<
<=
1<2
1<=2
1=<2
delta_t <- 600
seq(0,delta_t,by = 300)
1:delta_t/300
1:(delta_t/300)
linearInterpolate <- function(start = c(lonMissStart),
end = c(lonMissEnd),
delta_t = delta_t){
interpolated<- lonMissStart + (lonMissEnd-lonMissStart)/delta_t*(1:(delta_t/300))
return(interpolated)
}
linearInterpolate <- function(start = c(lonMissStart),
end = c(lonMissEnd),
delta_t = delta_t,
interval = 300){
interpolated<- lonMissStart + (lonMissEnd-lonMissStart)/delta_t*(1:(delta_t/interval))
return(interpolated)
}
d1 <- data %>% mutate( timestampMs = as.numeric(time_5min),
tMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ timestampMs),
tMissStart = tMissEnd,
lonMissEnd =case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ lonF),
lonMissStart = lonMissEnd,
latMissEnd = case_when(
is.na(lonF) ==  T~ NA_real_,
!is.na(lonF)== T ~ latF),
latMissStart = latMissEnd) %>%
fill(tMissEnd,lonMissEnd,latMissEnd, .direction ="up") %>%
fill(tMissStart,lonMissStart,latMissStart, .direction ="down")
View(d1)
linearInterpolate(1,2,delta_t)
linearInterpolate <- function(start = c(lonMissStart),
end = c(lonMissEnd),
delta_t = delta_t,
interval = 300){
interpolated<- start + (end-start)/delta_t*(1:(delta_t/interval))
return(interpolated)
}
linearInterpolate(1,2,delta_t)
#algo2aPalmius
d1[35,]
#algo2aPalmius
tMissStart <- d1[35,"tMissStart"]
tMissEnd <- d1[35,"tMissEnd"]
lonMissEnd <- d1[35,"lonMissEnd"]
lonMissStart <- d1[35,"lonMissStart"]
delta_t <-  tMissEnd-tMissStart
delta_t
midpoint_lon <- mean(lonMissEnd,lonMissStart)
midpoint_lat <- mean(latMissEnd,latMissStart)
midpoint_lon
mean(lonMissEnd,lonMissStart)
lonMissStart
lonMissEnd
tMissStart <- as.numeric(d1[35,"tMissStart"])
tMissEnd <- as.numeric(d1[35,"tMissEnd"])
lonMissEnd <- as.numeric(d1[35,"lonMissEnd"])
lonMissStart <- as.numeric(d1[35,"lonMissStart"])
delta_t <-  tMissEnd-tMissStart
midpoint_lon <- mean(lonMissEnd,lonMissStart)
latMissEnd <- as.numeric(d1[35,"latMissEnd"])
latMissStart <- as.numeric(d1[35,"latMissStart"])
delta_t <-  tMissEnd-tMissStart
midpoint_lon <- mean(lonMissEnd,lonMissStart)
midpoint_lat <- mean(latMissEnd,latMissStart)
t_prime<- raster::pointDistance(c(midpoint_lon,midpoint_lat),
c(lonMissStart,latMissStart),
lonlat = T)/22.23
t_prime
midtime <-  mean(tMissStart,tMissEnd)
midtime
delta_t <= 2* t_prime
delta_t
delta_t/300
delta_t/60
# goes to middle
impLon1 <- linearInterpolate(lonMissStart,midpoint_lon,t_prime/2)
impLon1
,t_prime/2
t_prime/2
(1:(delta_t/interval)
)
(1:(delta_t/300))
(1:(t_prime/2/300))
impLon2 <- linearInterpolate(midpoint_lon,midpoint_lon,tMissEnd-t_prime)
impLon3 <- linearInterpolate(midpoint_lon,lonMissEnd,t_prime/2)
impLon1
impLon2
tMissEnd-t_prime
tMissEnd
impLon2 <- linearInterpolate(midpoint_lon,midpoint_lon,delta_t-t_prime)
impLon2
impLon3 <- linearInterpolate(midpoint_lon,lonMissEnd,t_prime/2)
c(impLon1,impLon2,impLon3)
length(c(impLon1,impLon2,impLon3))
delta_t/300
(delta_t/interval)
(delta_t/300)
(t_prime/300)
1:(t_prime/300)
t_prime/interval
t_prime/300
1:(600/300)
1:(600/300)
1:(500/300)
impLon1 <- linearInterpolate(lonMissStart,midpoint_lon,t_prime/2)
impLon2 <- linearInterpolate(midpoint_lon,midpoint_lon,delta_t-t_prime)
impLon3 <- linearInterpolate(midpoint_lon,lonMissEnd,t_prime/2)
if(t_prime< 2* 300){
impLon <- c(impLon1,impLon2[-c(1,2)],impLon3)
}else{
impLon <- c(impLon1,impLon2,impLon3) # too long by one if distance is short
}
length(impLon)
length(impLon)
length(impLon2)
cat("Midpoint wait interpolation")
impLon1 <- linearInterpolate(lonMissStart,midpoint_lon,t_prime/2)
impLon2 <- linearInterpolate(midpoint_lon,midpoint_lon,delta_t-t_prime)
impLon3 <- linearInterpolate(midpoint_lon,lonMissEnd,t_prime/2)
if(t_prime< 2* 300){
impLon <- c(impLon1,impLon2[-c(1)],impLon3)
}else{
impLon <- c(impLon1,impLon2,impLon3) # too long by one if distance is short
}
imputeMidpointPalmius <- function(tMissStart = tMissStart,
tMissEnd = tMissEnd,
locMissStart = c(lonMissStart,latMissStart),
locMissEnd   = c(lonMissEnd,latMissEnd)){
# Extract variables
lonMissStart <- locMissStart[1]
latMissStart <- locMissStart[2]
lonMissEnd <- locMissEnd[1]
latMissEnd <- locMissEnd[2]
# Calculate time elapsed
delta_t <-  tMissEnd-tMissStart
# Calculate midpoints
midpoint_lon <- mean(lonMissEnd,lonMissStart)
midpoint_lat <- mean(latMissEnd,latMissStart)
#time to midpoint from begin while travelling at 80kmh
t_prime<- raster::pointDistance(c(midpoint_lon,midpoint_lat),
c(lonMissStart,latMissStart),
lonlat = T)/22.23
if( delta_t <= 2* t_prime){
# evenly spaced points between missing two ends
impLon <- linearInterpolate(lonMissStart,lonMissEnd,delta_t)
impLat <- linearInterpolate(latMissStart,latMissEnd,delta_t)
}else{
# goes to middle
cat("Midpoint wait interpolation")
impLon1 <- linearInterpolate(lonMissStart,midpoint_lon,t_prime/2)
impLon2 <- linearInterpolate(midpoint_lon,midpoint_lon,delta_t-t_prime)
impLon3 <- linearInterpolate(midpoint_lon,lonMissEnd,t_prime/2)
if(t_prime< 2* 300){
impLon <- c(impLon1,impLon2[-c(1)],impLon3)
}else{
impLon <- c(impLon1,impLon2,impLon3) # too long by one if distance is short
}
cat("Midpoint wait interpolation")
impLat1 <- linearInterpolate(latMissStart,midpoint_lat,t_prime/2)
impLat2 <- linearInterpolate(midpoint_lat,midpoint_lat,delta_t-t_prime)
impLat3 <- linearInterpolate(midpoint_lat,latMissEnd,t_prime/2)
if(t_prime< 2* 300){
impLat <- c(impLat1,impLat2[-c(1)],implat3)
}else{
impLat <- c(implat1,impLat2,impLat3) # too latg by one if distance is short
}
return(list(impLon,impLat))
}
}
linearInterpolate <- function(start = c(lonMissStart),
end = c(lonMissEnd),
delta_t = delta_t,
interval = 300){
interpolated<- start + (end-start)/delta_t*(1:(delta_t/interval))
return(interpolated)
}
imputeMidpointPalmius()
tMissStart <- as.numeric(d1[35,"tMissStart"])
tMissEnd <- as.numeric(d1[35,"tMissEnd"])
lonMissEnd <- as.numeric(d1[35,"lonMissEnd"])
lonMissStart <- as.numeric(d1[35,"lonMissStart"])
latMissEnd <- as.numeric(d1[35,"latMissEnd"])
latMissStart <- as.numeric(d1[35,"latMissStart"])
locMissStart = c(lonMissStart,latMissStart)
locMissEnd   = c(lonMissEnd,latMissEnd)
locMissStart
locMissEnd
imputeMidpointPalmius(tMissStart = tMissStart,
tMissEnd = tMissEnd,
locMissStart = locMissStart,
locMissEnd   = locMissEnd)
imputeMidpointPalmius <- function(tMissStart = tMissStart,
tMissEnd = tMissEnd,
locMissStart = c(lonMissStart,latMissStart),
locMissEnd   = c(lonMissEnd,latMissEnd)){
# Extract variables
lonMissStart <- locMissStart[1]
latMissStart <- locMissStart[2]
lonMissEnd <- locMissEnd[1]
latMissEnd <- locMissEnd[2]
# Calculate time elapsed
delta_t <-  tMissEnd-tMissStart
# Calculate midpoints
midpoint_lon <- mean(lonMissEnd,lonMissStart)
midpoint_lat <- mean(latMissEnd,latMissStart)
#time to midpoint from begin while travelling at 80kmh
t_prime<- raster::pointDistance(c(midpoint_lon,midpoint_lat),
c(lonMissStart,latMissStart),
lonlat = T)/22.23
if( delta_t <= 2* t_prime){
# evenly spaced points between missing two ends
impLon <- linearInterpolate(lonMissStart,lonMissEnd,delta_t)
impLat <- linearInterpolate(latMissStart,latMissEnd,delta_t)
}else{
# goes to middle
cat("Midpoint wait interpolation")
impLon1 <- linearInterpolate(lonMissStart,midpoint_lon,t_prime/2)
impLon2 <- linearInterpolate(midpoint_lon,midpoint_lon,delta_t-t_prime)
impLon3 <- linearInterpolate(midpoint_lon,lonMissEnd,t_prime/2)
if(t_prime< 2* 300){
impLon <- c(impLon1,impLon2[-c(1)],impLon3)
}else{
impLon <- c(impLon1,impLon2,impLon3) # too long by one if distance is short
}
cat("Midpoint wait interpolation")
impLat1 <- linearInterpolate(latMissStart,midpoint_lat,t_prime/2)
impLat2 <- linearInterpolate(midpoint_lat,midpoint_lat,delta_t-t_prime)
impLat3 <- linearInterpolate(midpoint_lat,latMissEnd,t_prime/2)
if(t_prime< 2* 300){
impLat <- c(impLat1,impLat2[-c(1)],impLat3)
}else{
impLat <- c(implat1,impLat2,impLat3) # too latg by one if distance is short
}
return(list(impLon,impLat))
}
}
imputeMidpointPalmius(tMissStart = tMissStart,
tMissEnd = tMissEnd,
locMissStart = locMissStart,
locMissEnd   = locMissEnd)
imputeMidpointPalmius <- function(tMissStart = tMissStart,
tMissEnd = tMissEnd,
locMissStart = c(lonMissStart,latMissStart),
locMissEnd   = c(lonMissEnd,latMissEnd)){
# Extract variables
lonMissStart <- locMissStart[1]
latMissStart <- locMissStart[2]
lonMissEnd <- locMissEnd[1]
latMissEnd <- locMissEnd[2]
# Calculate time elapsed
delta_t <-  tMissEnd-tMissStart
# Calculate midpoints
midpoint_lon <- mean(lonMissEnd,lonMissStart)
midpoint_lat <- mean(latMissEnd,latMissStart)
#time to midpoint from begin while travelling at 80kmh
t_prime<- raster::pointDistance(c(midpoint_lon,midpoint_lat),
c(lonMissStart,latMissStart),
lonlat = T)/22.23
if( delta_t <= 2* t_prime){
# evenly spaced points between missing two ends
impLon <- linearInterpolate(lonMissStart,lonMissEnd,delta_t)
impLat <- linearInterpolate(latMissStart,latMissEnd,delta_t)
}else{
# goes to middle
cat("Midpoint wait interpolation")
impLon1 <- linearInterpolate(lonMissStart,midpoint_lon,t_prime/2)
impLon2 <- linearInterpolate(midpoint_lon,midpoint_lon,delta_t-t_prime)
impLon3 <- linearInterpolate(midpoint_lon,lonMissEnd,t_prime/2)
if(t_prime< 2* 300){
impLon <- c(impLon1,impLon2[-c(1)],impLon3)
}else{
impLon <- c(impLon1,impLon2,impLon3) # too long by one if distance is short
}
cat("Midpoint wait interpolation")
impLat1 <- linearInterpolate(latMissStart,midpoint_lat,t_prime/2)
impLat2 <- linearInterpolate(midpoint_lat,midpoint_lat,delta_t-t_prime)
impLat3 <- linearInterpolate(midpoint_lat,latMissEnd,t_prime/2)
if(t_prime< 2* 300){
impLat <- c(impLat1,impLat2[-c(1)],impLat3)
}else{
impLat <- c(implat1,impLat2,impLat3) # too latg by one if distance is short
}
return(list(lon = impLon,lat = impLat))
}
}
imputeMidpointPalmius(tMissStart = tMissStart,
tMissEnd = tMissEnd,
locMissStart = locMissStart,
locMissEnd   = locMissEnd)
imputeMidpointPalmius <- function(tMissStart = tMissStart,
tMissEnd = tMissEnd,
locMissStart = c(lonMissStart,latMissStart),
locMissEnd   = c(lonMissEnd,latMissEnd)){
# Extract variables
lonMissStart <- locMissStart[1]
latMissStart <- locMissStart[2]
lonMissEnd <- locMissEnd[1]
latMissEnd <- locMissEnd[2]
# Calculate time elapsed
delta_t <-  tMissEnd-tMissStart
# Calculate midpoints
midpoint_lon <- mean(lonMissEnd,lonMissStart)
midpoint_lat <- mean(latMissEnd,latMissStart)
#time to midpoint from begin while travelling at 80kmh
t_prime<- raster::pointDistance(c(midpoint_lon,midpoint_lat),
c(lonMissStart,latMissStart),
lonlat = T)/22.23
if( delta_t <= 2* t_prime){
# evenly spaced points between missing two ends
impLon <- linearInterpolate(lonMissStart,lonMissEnd,delta_t)
impLat <- linearInterpolate(latMissStart,latMissEnd,delta_t)
}else{
# goes to middle
cat("Midpoint wait interpolation /n")
impLon1 <- linearInterpolate(lonMissStart,midpoint_lon,t_prime/2)
impLon2 <- linearInterpolate(midpoint_lon,midpoint_lon,delta_t-t_prime)
impLon3 <- linearInterpolate(midpoint_lon,lonMissEnd,t_prime/2)
if(t_prime< 2* 300){
impLon <- c(impLon1,impLon2[-c(1)],impLon3)
}else{
impLon <- c(impLon1,impLon2,impLon3) # too long by one if distance is short
}
impLat1 <- linearInterpolate(latMissStart,midpoint_lat,t_prime/2)
impLat2 <- linearInterpolate(midpoint_lat,midpoint_lat,delta_t-t_prime)
impLat3 <- linearInterpolate(midpoint_lat,latMissEnd,t_prime/2)
if(t_prime< 2* 300){
impLat <- c(impLat1,impLat2[-c(1)],impLat3)
}else{
impLat <- c(implat1,impLat2,impLat3) # too latg by one if distance is short
}
return(list(lon = impLon,lat = impLat))
}
}
imputeMidpointPalmius(tMissStart = tMissStart,
tMissEnd = tMissEnd,
locMissStart = locMissStart,
locMissEnd   = locMissEnd)
tMissStart <- as.numeric(d1[129,"tMissStart"])
tMissEnd <- as.numeric(d1[129,"tMissEnd"])
lonMissEnd <- as.numeric(d1[129,"lonMissEnd"])
lonMissStart <- as.numeric(d1[129,"lonMissStart"])
latMissEnd <- as.numeric(d1[129,"latMissEnd"])
latMissStart <- as.numeric(d1[129,"latMissStart"])
locMissStart = c(lonMissStart,latMissStart)
locMissEnd   = c(lonMissEnd,latMissEnd)
imputeMidpointPalmius(tMissStart = tMissStart,
tMissEnd = tMissEnd,
locMissStart = locMissStart,
locMissEnd   = locMissEnd)
debug(imputeMidpointPalmius)
tMissStart <- as.numeric(d1[129,"tMissStart"])
tMissEnd <- as.numeric(d1[129,"tMissEnd"])
lonMissEnd <- as.numeric(d1[129,"lonMissEnd"])
lonMissStart <- as.numeric(d1[129,"lonMissStart"])
latMissEnd <- as.numeric(d1[129,"latMissEnd"])
latMissStart <- as.numeric(d1[129,"latMissStart"])
locMissStart = c(lonMissStart,latMissStart)
locMissEnd   = c(lonMissEnd,latMissEnd)
imputeMidpointPalmius(tMissStart = tMissStart,
tMissEnd = tMissEnd,
locMissStart = locMissStart,
locMissEnd   = locMissEnd)
midpoint_lon
t_prime
head(d1)
nrow(d1)
head(dataExample)
nrow(dataExample)
tail(dataExample)
readr::write_csv(dataExample,"balazs2017.csv")
