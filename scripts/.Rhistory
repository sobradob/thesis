1+1
addinslist:::addinslistAddin()
library('MASS')
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.linpred
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
## Check
glm(Y ~ X1 + X2, data = dat, family = binomial) ## Should be close to -1.3, log(2), log(2).
## Check EPV
min(sum(dat$Y == 0), sum(dat$Y == 1)) / 2 ## Should be approximately 10.
install.packages("logistf")
glm(Y ~ X1 + X2, data = dat, family = binomial)
glm(Y ~ X1 + X2, data = dat, family = binomial)$parameter
glm(Y ~ X1 + X2, data = dat, family = binomial)$parameters
glm(Y ~ X1 + X2, data = dat, family = binomial)$beta
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
logistif::logistif(Y ~ X1 + X2, data = dat)
logistf::logistf(Y ~ X1 + X2, data = dat)
x<- logistf::logistf(Y ~ X1 + X2, data = dat)
x$coefficients
x$coefficients[2]
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
set.seed(1313)
method1 <- vector()
method2 <- vector()
datalist <- list()
for(i in 1:1000){
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients[2]
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
datalist[i] <- dat
}
method1
method2
calcEPV<- function(dat){
min(sum(dat$Y == 0), sum(dat$Y == 1)) / 2
}
str(datalist)
lapply(X = datalist,FUN = calcEPV())
set.seed(1313)
method1 <- vector()
method2 <- vector()
datalist <- list()
for(i in 1:1000){
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients[2]
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
datalist[[i]] <- dat
}
datalist
lapply(X = datalist,FUN = calcEPV())
lapply(X = datalist,FUN = calcEPV
)
?lapply
sapply(X = datalist,FUN = calcEPV)
simEPVs<- sapply(X = datalist,FUN = calcEPV)
simEPVs
mean(simEPVs-10)
simfunc1<- function(sampsize){
for(i in 1:1000){
dat <- mvrnorm(n = sampsize, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
method1 <- list()
method2 <- list()
datalist <- list()
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient
datalist[[i]] <- dat
}
simEPVs<- sapply(X = datalist,FUN = calcEPV)
return(mean(simEPVs-10))
}
simfunc1(80)
simfunc1(160)
simfunc1(320)
for(i 1 :1000){
cat(i, " \r"); flush.console()
}
for(i in  1 :1000){
cat(i, " \r"); flush.console()
}
## plots on accuracy
# missing days with padr
library(dplyr)
library(padr)
library(ggplot2)
library(tibbletime)
all<-readRDS("../data/boaz/myLocationHistory.rds")
setwd("C:/Users/Boaz Sobrado/Desktop/boaz/Life/Academic/Utrecht/year2/thesisFiles/thesis/scripts")
all<-readRDS("../../data/boaz/myLocationHistory.rds")
all$time<- lubridate::with_tz(all$time, "Europe/Budapest")
#similar to the plot with distance from home and accuracy from palmius
library(leaflet)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 ~ 2017-02-15) %>%
filter(accuracy>0) %>%
leaflet() %>%
addTiles() %>%
addMarkers(~lon, ~lat)
# extract home
#52.10421 5.113919
home<- c(5.113919,52.10421)
boazday0218<- all %>%
select(time,lon,lat,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 ~ 2017-02-15)%>%
mutate( distanceHome = sp::spDistsN1(pts=matrix(c(lon,lat),ncol = 2),
pt = home,
longlat = T),
euclon = lon-home[1],
euclat = lat-home[2])
boazday0218<- all %>%
select(time,lon,lat,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 ~ 2017-02-15)%>%
mutate( distanceHome = sp::spDistsN1(pts=matrix(c(lon,lat),ncol = 2),
pt = home,
longlat = T),
euclon = lon-home[1],
euclat = lat-home[2])
ggplot(boazday0218,aes(x = euclon,y = euclat, colour = accuracy))+geom_point()+theme_tufte()
library(ggthemes)
ggplot(boazday0218,aes(x = euclon,y = euclat, colour = accuracy))+geom_point()+theme_tufte()
# Lets make some data
circles <- data.frame(
x0 = rep(1:3, 3),
y0 =  rep(1:3, each=3),
r = seq(0.1, 1, length.out = 9)
)
# Behold the some circles
ggplot() + geom_circle(aes(x0=x0, y0=y0, r=r, fill=r), data=circles)
circles <- data.frame(
x0 = rep(1:3, 3),
y0 =  rep(1:3, each=3),
r = seq(0.1, 1, length.out = 9)
)
library(ggplot2)
# Behold the some circles
ggplot() + geom_circle(aes(x0=x0, y0=y0, r=r, fill=r), data=circles)
library(ggforce)
install.packages("ggforce")
library(ggforce)
# Behold the some circles
ggplot() + geom_circle(aes(x0=x0, y0=y0, r=r, fill=r), data=circles)
ggplot() + geom_circle(aes(x0=x0, y0=y0, r=r, fill=r), data=circles) +
coord_fixed()
# Behold the some circles
ggplot() + geom_circle(aes(x0=x0, y0=y0, r=r, fill=r), data=circles)
# Behold the some circles
ggplot() + geom_circle(aes(x0=x0, y0=y0, r=r), data=circles)
40075 / 360
boazday0218
#each degree is this much m
40075/360*1000
#each degree is this much m
accuracy/(40075/360*1000)
#each degree is this much m
boazday0218$accuracy/(40075/360*1000)
#each degree is this much m
metersPerDeg <- (40075/360*1000)
ggplot(boazday0218,aes(x = euclon,y = euclat, colour = accuracy))+
geom_point()+
theme_tufte()+
geom_circle(aes(x0=euclon, y0=euclat, r= accuracy/metersPerDeg))
ggplot(boazday0218,aes(x = euclon,y = euclat, colour = accuracy))+geom_point()+theme_tufte()
p<- ggplot(boazday0218,aes(x = euclat,y = euclon, colour = accuracy, frame = time))+geom_point()+theme_tufte()
gganimate(p,"output.html",interval = .2)
library(gganimate)
p<- ggplot(boazday0218,aes(x = euclat,y = euclon, colour = accuracy, frame = time))+geom_point()+theme_tufte()
gganimate(p,"output.html",interval = .2)
p<- ggplot(boazday0218,aes(x = euclat,y = euclon, colour = accuracy, frame = time))+geom_point()+theme_tufte()
p
p<- ggplot(boazday0218,aes(x = euclon,y = euclat, colour = accuracy, frame = time))+geom_point()+theme_tufte()
p
attr(boazday0218$time,"tzone")
dir()
library(ggmap)
?get_stamenmap
c(left = -95.80204, bottom = 29.38048, right = -94.92313,
top = 30.14344)
box<- c(left = -95.80204, bottom = 29.38048, right = -94.92313,top = 30.14344)
box<- c(left = min(boazday0218$lon), bottom = min(boazday0218$lat), right = max(boazday0218$lon),top = max(boazday0218$lat))
get_stamenmap(bbox=box,zoom = 5, maptype = "toner-lite")
map<- get_stamenmap(bbox=box,zoom = 5, maptype = "toner-lite")
ggmap(map)
map<- get_stamenmap(bbox=box,zoom = 10, maptype = "toner-lite")
ggmap(map)
map<- get_stamenmap(bbox=box,zoom = 15, maptype = "toner-lite")
ggmap(map)
map<- get_stamenmap(bbox=box,zoom = 17, maptype = "toner-lite")
map<- get_stamenmap(bbox=box,zoom = 16, maptype = "toner-lite")
ggmap(map)
box<- c(left = min(boazday0218$lon)+0.01,
bottom = min(boazday0218$lat)+0.01,
right = max(boazday0218$lon)+0.01,
top = max(boazday0218$lat)+0.01)
map<- get_stamenmap(bbox=box,zoom = 17, maptype = "toner-lite")
map<- get_stamenmap(bbox=box,zoom = 5, maptype = "toner-lite")
ggmap(map)
map<- get_stamenmap(bbox=box,zoom = 16, maptype = "toner-lite")
ggmap(map)
qmplot(lon, lat, data = boazday0218, maptype = "toner-lite", color = I("red"))
qmplot(lon, lat, data = boazday0218, maptype = "toner-lite", color = accuracy)
p<- qmplot(lon, lat, data = boazday0218, maptype = "toner-lite", color = accuracy, frame = time)
gganimate(p,"output.gif",interval = .2)
str(p)
p<- ggplot(boazday0218,aes(x = euclon,y = euclat, colour = accuracy, frame = time))+geom_point()+theme_tufte()
q<- qmplot(lon, lat, data = boazday0218, maptype = "toner-lite", color = accuracy,frame = time)
str(q)
str(p)
box<- c(left = min(boazday0218$lon)-0.01,
bottom = min(boazday0218$lat)-0.01,
right = max(boazday0218$lon)+0.01,
top = max(boazday0218$lat)+0.01)
map<- get_stamenmap(bbox=box,zoom = 15, maptype = "toner-lite")
ggmap(map)
q<- ggmap(map)+geom_point(aes(lon,lat,frame = time,colour = accuracy),data = boazday0218)
gganimate(p,"output.gif",interval = .2)
gganimate(q,"output.gif",interval = .2)
q<- ggmap(map)+
geom_point(aes(lon,lat,frame = time,colour = accuracy),data = boazday0218)
gganimate(q,"output.gif",interval = .2)
install.packages("magick")
gganimate(q,"output.gif",interval = .2)
library(magick)
gganimate(q,"output.gif",interval = .2)
library(animation)
gganimate(q,"output.gif",interval = .2, ani.options(convert = 'path/to/convert.exe'))
gganimate(q,"output.gif", ani.options(convert = 'path/to/convert.exe',interval = .2))
gganimate(q,"output.gif", ani.options(c(convert = 'path/to/convert.exe',interval = .2)))
gganimate(q, ani.options(convert = 'path/to/convert.exe'))
Sys.setenv(PATH = paste("C:/Program Files/ImageMagick/bin",
Sys.getenv("PATH"), sep = ";"))
👍 3
Sys.setenv(PATH = paste("C:/Program Files/ImageMagick/bin",
Sys.getenv("PATH"), sep = ";"))
gganimate(q,"output.gif",interval = .2)
library(installr); install.ImageMagick(URL = "http://www.imagemagick.org/script/download.php")
install.packages(installr)
install.packages("installr")
library(installr); install.ImageMagick(URL = "http://www.imagemagick.org/script/download.php")
gganimate(q,"output.gif",interval = .2)
ggplot()
library(ggmap)
library(gganimate)
q<- ggmap(map)+
geom_point(aes(lon,lat,frame = time,colour = accuracy),data = boazday0218)
gganimate(q,"output.gif",interval = .2)
Sys.setenv(PATH = paste("C:/Program Files/ImageMagick/bin",
Sys.getenv("PATH"), sep = ";"))
gganimate(q,"output.gif",interval = .2)
devtools::install_github("yihui/animation")
library(animation)
gganimate(q,"output.gif",interval = .2)
