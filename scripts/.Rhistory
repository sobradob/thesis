1+1
addinslist:::addinslistAddin()
library('MASS')
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.linpred
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
## Check
glm(Y ~ X1 + X2, data = dat, family = binomial) ## Should be close to -1.3, log(2), log(2).
## Check EPV
min(sum(dat$Y == 0), sum(dat$Y == 1)) / 2 ## Should be approximately 10.
install.packages("logistf")
glm(Y ~ X1 + X2, data = dat, family = binomial)
glm(Y ~ X1 + X2, data = dat, family = binomial)$parameter
glm(Y ~ X1 + X2, data = dat, family = binomial)$parameters
glm(Y ~ X1 + X2, data = dat, family = binomial)$beta
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
logistif::logistif(Y ~ X1 + X2, data = dat)
logistf::logistf(Y ~ X1 + X2, data = dat)
x<- logistf::logistf(Y ~ X1 + X2, data = dat)
x$coefficients
x$coefficients[2]
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
set.seed(1313)
method1 <- vector()
method2 <- vector()
datalist <- list()
for(i in 1:1000){
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients[2]
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
datalist[i] <- dat
}
method1
method2
calcEPV<- function(dat){
min(sum(dat$Y == 0), sum(dat$Y == 1)) / 2
}
str(datalist)
lapply(X = datalist,FUN = calcEPV())
set.seed(1313)
method1 <- vector()
method2 <- vector()
datalist <- list()
for(i in 1:1000){
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients[2]
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
datalist[[i]] <- dat
}
datalist
lapply(X = datalist,FUN = calcEPV())
lapply(X = datalist,FUN = calcEPV
)
?lapply
sapply(X = datalist,FUN = calcEPV)
simEPVs<- sapply(X = datalist,FUN = calcEPV)
simEPVs
mean(simEPVs-10)
simfunc1<- function(sampsize){
for(i in 1:1000){
dat <- mvrnorm(n = sampsize, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
method1 <- list()
method2 <- list()
datalist <- list()
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient
datalist[[i]] <- dat
}
simEPVs<- sapply(X = datalist,FUN = calcEPV)
return(mean(simEPVs-10))
}
simfunc1(80)
simfunc1(160)
simfunc1(320)
for(i 1 :1000){
cat(i, " \r"); flush.console()
}
for(i in  1 :1000){
cat(i, " \r"); flush.console()
}
#set location to source file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(dplyr)
library(padr)
library(ggplot2)
library(tibbletime)
library(ggthemes)
library(scales)
# read data
#all<-readRDS("../../data/peter/myLocationHistory.rds")
all<-readRDS("../../data/boaz/myLocationHistory.rds")
all$time<- lubridate::with_tz(all$time, "Europe/Budapest")# don't forget to run
time1_p1 <- strptime(paste("2017-02-15", "00:00:00"), "%Y-%m-%d %H:%M:%S")
time2_p1 <- strptime(paste("2017-02-15", "24:00:00"), "%Y-%m-%d %H:%M:%S")
xlim_p1 <- as.POSIXct(c(time1_p1, time2_p1), origin="1970-01-01", tz="Europe/Budapest")
x<- all %>%
select(time,lon,lat,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02 ~ 2017-02) %>%
thicken('5 min', colname = 'time2') %>%
group_by(time2) %>%
summarise(lon = mean(lon),
lat = mean(lat),
accuracy = mean(accuracy)
)%>%
pad()%>%
tidyr::fill(c(lon,lat)) %>%
mutate(distanceHome = sp::spDistsN1(pts=matrix(c(lon,lat),ncol = 2),
pt = home,
longlat = T))
home<- c(5.113919,52.10421)
x<- all %>%
select(time,lon,lat,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02 ~ 2017-02) %>%
thicken('5 min', colname = 'time2') %>%
group_by(time2) %>%
summarise(lon = mean(lon),
lat = mean(lat),
accuracy = mean(accuracy)
)%>%
pad()%>%
tidyr::fill(c(lon,lat)) %>%
mutate(distanceHome = sp::spDistsN1(pts=matrix(c(lon,lat),ncol = 2),
pt = home,
longlat = T))
athome<- x %>% mutate(atHome = case_when(distanceHome <0.25 ~ 1,
distanceHome >0.25 ~ 0)) %>%
thicken('day', colname = 'time') %>%
group_by(time) %>%
summarise(atHome2 = sum(atHome)/288) %>%
mutate(day = strftime(time,"%A"))
athome$day <- factor(athome$day, levels= c("Monday",
"Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday","Sunday"))
timeUse<- ggplot(athome,aes(x = day, y = atHome2))+
geom_point()+theme_tufte()+xlab("Day of the week")+
ylab("Proportion of time\nspent at home")+ggtitle("Time spent at home - February 2017")
ggsave(timeUse,filename = "../img/timeUse.png",device = "png",height = 10,width = 20, units = "cm")
events <- data.frame(name = c("Journey 1", "Journey 2", "Journey 3","Journey 4","Journey 5","Journey 6"),
time =c(as.POSIXct("2017-02-15 08:00:00",
tz= "Europe/Budapest"),
as.POSIXct("2017-02-15 10:00:00",
tz= "Europe/Budapest"),
as.POSIXct("2017-02-15 14:30:00",
tz= "Europe/Budapest"),
as.POSIXct("2017-02-15 17:30:00",
tz= "Europe/Budapest"),
as.POSIXct("2017-02-15 19:00:00",
tz= "Europe/Budapest"),
as.POSIXct("2017-02-15 20:45:00",
tz= "Europe/Budapest"))
)
distanceTime<- all %>%
select(time,lon,lat,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 ~ 2017-02-15)%>%
mutate( distanceHome = sp::spDistsN1(pts=matrix(c(lon,lat),ncol = 2),
pt = home,
longlat = T),
euclon = lon-home[1],
euclat = lat-home[2],
distancePrev = c(0,
sp::spDists(x=matrix(c(lon,lat),ncol = 2), segments = T)),
rDistPrev = distancePrev) %>%
ggplot( aes(x = time, y=rDistPrev*1000))+
geom_line()+theme_tufte()+
xlab("")+ylab("Distance over time")+
scale_x_datetime(breaks = date_breaks("4 hour"),
minor_breaks=date_breaks("2 hour"),
labels=date_format("%H:%M:%S", tz = "Europe/Budapest"),
limits = xlim_p1)+
geom_text(data=events,
aes(x=time,y=50,label=name),size=3,angle = 90, colour= muted("red"))+
ylim(c(-1,57))
accuracyTime <- all %>%
select(time,lon,lat,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 ~ 2017-02-15)%>%
mutate( distanceHome = sp::spDistsN1(pts=matrix(c(lon,lat),ncol = 2),
pt = home,
longlat = T),
euclon = lon-home[1],
euclat = lat-home[2],
distancePrev = c(0,
sp::spDists(x=matrix(c(lon,lat),ncol = 2), segments = T)),
rDistPrev = accuracy) %>%
ggplot( aes(x = time, y=rDistPrev))+
geom_line()+theme_tufte()+
xlab("Time")+ylab("Accuracy")+
scale_x_datetime(breaks = date_breaks("4 hour"),
minor_breaks=date_breaks("2 hour"),
labels=date_format("%H:%M:%S", tz = "Europe/Budapest"),
limits = xlim_p1)
library(gridExtra)
library(grid)
locShift<- grid.arrange(distanceTime,accuracyTime,ncol=1)
m5minv2<- all %>%
select(time,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2000-01 ~ 2017-06) %>%
thicken('5 min') %>%
group_by(time_5_min) %>%
summarise(measurements = n(),
accuracy = mean(accuracy)) %>%
pad() %>%
fill_by_value(value = 0)%>%
mutate(
hour = as.POSIXct(
paste0("2014-01-22 ",
strftime(time_5_min,format = "%H:%M", tz = "Europe/Budapest"))),
time2 = lubridate::force_tz(time_5_min, "Asia/Singapore"),
missing = case_when(
measurements== 0 ~ 1,
measurements > 0 ~ 0)
)
exampleMiss<- m5minv2 %>%
as_tbl_time(index = time2)%>%
time_filter(2017-02-15 ~ 2017-02-15) %>%
ggplot( aes(x = hour, y=measurements, colour = factor(missing)))+
geom_point()+theme_tufte()+
xlab("")+
ylab("Measurements")+
ggtitle("Measurements per 5 minute window")+
scale_x_datetime(breaks = date_breaks("4 hour"),
minor_breaks=date_breaks("2 hour"),
labels=date_format("%H:%M:%S", tz = "Asia/Singapore"))+
scale_colour_manual(values=c("black",muted("red")),labels=c("Not Missing", "Missing"))+
labs(x = NULL, colour = "")
exampleMiss
exampleMiss<- m5minv2 %>%
as_tbl_time(index = time2)%>%
time_filter(2017-02-15 ~ 2017-02-15) %>%
ggplot( aes(x = hour, y=measurements, colour = factor(missing)))+
geom_point()+theme_tufte()+
xlab("")+
ylab("Measurements")+
ggtitle("Measurements per 5 minute window",subtitle = "February 15 2017")+
scale_x_datetime(breaks = date_breaks("4 hour"),
minor_breaks=date_breaks("2 hour"),
labels=date_format("%H:%M:%S", tz = "Asia/Singapore"))+
scale_colour_manual(values=c("black",muted("red")),labels=c("Not Missing", "Missing"))+
labs(x = NULL, colour = "")+xlab("Time")
exampleMiss
ggsave(exampleMiss,filename = "../img/missingBoaz5minExample.png",device = "png",height = 10, width = 20, units = "cm")
# by hour
mHour<- all %>%
select(time) %>%
as_tbl_time(index = time) %>%
time_filter(2016-01 ~ 2017-01) %>%
thicken('hour') %>%
group_by(time_hour) %>%
summarise(measurements = n()) %>%
pad() %>%
fill_by_value(value = 0) %>%
thicken("day") %>%
mutate(
type = case_when(
measurements== 0 ~ 1,
measurements > 0 ~ 0)) %>%
group_by(time_hour_day) %>%
summarise(hoursMissing = sum(type),
measurements = sum(measurements))
missingDay<- ggplot(mHour, aes(x = time_hour_day, y=measurements, colour= hoursMissing))+
geom_point()+theme_tufte()+
xlab("")+
ylab("Measurements")+
ggtitle("Amount of daily measurements over time")+
scale_colour_gradient2(low = muted("green"), mid = "grey50",
high = muted("red"), midpoint = 12, space = "Lab",
na.value = "grey50", guide = "colourbar")+
labs(x = NULL, colour = "Missing Hours")
missingDay
m5min<- all %>%
select(time) %>%
as_tbl_time(index = time) %>%
time_filter(2000-01 ~ 2017-06) %>%
thicken('5 min') %>%
group_by(time_5_min) %>%
summarise(measurements = n()) %>%
pad() %>%
fill_by_value(value = 0) %>%
thicken("day") %>%
mutate(
type = case_when(
measurements== 0 ~ 1,
measurements > 0 ~ 0)) %>%
group_by(time_5_min_day) %>%
summarise(min5Missing = sum(type),
measurements = sum(measurements))
missingDay5min<- ggplot(m5min, aes(x = time_5_min_day, y=measurements, colour= min5Missing))+
geom_point()+theme_tufte()+
xlab("")+
ylab("Measurements")+
ggtitle("Missingness in daily measurements over time")+
scale_colour_gradient2(low = "black", mid = "grey50",
high = muted("red"), midpoint = 144, space = "Lab",
na.value = "grey50", guide = "colourbar")+
labs(x = NULL, colour = "Missing \n5 minute\n segments")
missingDay5min
ggsave(missingDay5min,filename = "../img/missingdayBoaz5min.png",device = "png",height = 10, width = 20, units = "cm")
missingDay5min<- ggplot(m5min, aes(x = time_5_min_day, y=measurements, colour= min5Missing))+
geom_point()+theme_tufte()+
xlab("")+
ylab("Measurements")+
ggtitle("Missingness in daily measurements over time")+
scale_colour_gradient2(low = "black", mid = "grey50",
high = muted("red"), midpoint = 144, space = "Lab",
na.value = "grey50", guide = "colourbar")+
labs(x = NULL, colour = "Missing \n5 minute\n segments")+xlab("Time")
ggsave(missingDay5min,filename = "../img/missingdayBoaz5min.png",device = "png",height = 10, width = 20, units = "cm")
missingDay5min
missingDay5min<- ggplot(m5min, aes(x = time_5_min_day, y=measurements, colour= min5Missing))+
geom_point()+theme_tufte()+
xlab("")+
ylab("Measurements")+
ggtitle("Missingness in daily measurements", subtitle = "2013-2017")+
scale_colour_gradient2(low = "black", mid = "grey50",
high = muted("red"), midpoint = 144, space = "Lab",
na.value = "grey50", guide = "colourbar")+
labs(x = NULL, colour = "Missing \n5 minute\n segments")+xlab("Time")
missingDay5min
ggsave(missingDay5min,filename = "../img/missingdayBoaz5min.png",device = "png",height = 10, width = 20, units = "cm")
