min(sum(dat$Y == 0), sum(dat$Y == 1)) / 2 ## Should be approximately 10.
install.packages("logistf")
glm(Y ~ X1 + X2, data = dat, family = binomial)
glm(Y ~ X1 + X2, data = dat, family = binomial)$parameter
glm(Y ~ X1 + X2, data = dat, family = binomial)$parameters
glm(Y ~ X1 + X2, data = dat, family = binomial)$beta
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
logistif::logistif(Y ~ X1 + X2, data = dat)
logistf::logistf(Y ~ X1 + X2, data = dat)
x<- logistf::logistf(Y ~ X1 + X2, data = dat)
x$coefficients
x$coefficients[2]
glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
set.seed(1313)
method1 <- vector()
method2 <- vector()
datalist <- list()
for(i in 1:1000){
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients[2]
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
datalist[i] <- dat
}
method1
method2
calcEPV<- function(dat){
min(sum(dat$Y == 0), sum(dat$Y == 1)) / 2
}
str(datalist)
lapply(X = datalist,FUN = calcEPV())
set.seed(1313)
method1 <- vector()
method2 <- vector()
datalist <- list()
for(i in 1:1000){
dat <- mvrnorm(n = 80, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
class(dat)
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients[2]
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient[2]
datalist[[i]] <- dat
}
datalist
lapply(X = datalist,FUN = calcEPV())
lapply(X = datalist,FUN = calcEPV
)
?lapply
sapply(X = datalist,FUN = calcEPV)
simEPVs<- sapply(X = datalist,FUN = calcEPV)
simEPVs
mean(simEPVs-10)
simfunc1<- function(sampsize){
for(i in 1:1000){
dat <- mvrnorm(n = sampsize, mu = c(0, 0), Sigma = matrix(c(1, 0.2, 0.2, 1), nrow = 2))
dat <- as.data.frame(dat)
colnames(dat) <- c('X1', 'X2')
method1 <- list()
method2 <- list()
datalist <- list()
## Simulate Y
Y.linpred <- -1.3 + log(2) * dat$X1 + log(2) * dat$X2
Y.prob <- exp(Y.linpred) / (1 + exp(Y.linpred))
dat$Y <- rbinom(n = nrow(dat), size = 1, prob = Y.prob)
method1[i] <- logistf::logistf(Y ~ X1 + X2, data = dat)$coefficients
method2[i] <- glm(Y ~ X1 + X2, data = dat, family = binomial)$coefficient
datalist[[i]] <- dat
}
simEPVs<- sapply(X = datalist,FUN = calcEPV)
return(mean(simEPVs-10))
}
simfunc1(80)
simfunc1(160)
simfunc1(320)
for(i 1 :1000){
cat(i, " \r"); flush.console()
}
for(i in  1 :1000){
cat(i, " \r"); flush.console()
}
library(dplyr)
library(padr)
library(ggplot2)
library(tibbletime)
all<-readRDS("../../data/boaz/myLocationHistory.rds")
all<-readRDS("../../../data/boaz/myLocationHistory.rds")
all<-readRDS("../../data/boaz/myLocationHistory.rds")
all<-readRDS("../data/boaz/myLocationHistory.rds")
dir()
setwd("C:/Users/Boaz Sobrado/Desktop/boaz/Life/Academic/Utrecht/year2/thesisFiles/thesis/scripts")
all<-readRDS("../../data/boaz/myLocationHistory.rds")
#similar to the plot with distance from home and accuracy from palmius
library(leaflet)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 ~ 2017-02-15) %>%
filter(accuracy>0) %>%
leaflet() %>%
addTiles() %>%
addMarkers(~lon, ~lat)
# read data
all<-readRDS("../../data/peter/myLocationHistory.rds")
all<-readRDS("../../data/boaz/myLocationHistory.rds")
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 ~ 2017-02-18) %>%
filter(accuracy>0) %>%
leaflet() %>%
addTiles() %>%
addMarkers(~lon, ~lat)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 ~ 2017-02-18) %>%
filter(accuracy>0) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy
)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 ~ 2017-02-18) %>%
filter(accuracy>0) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, alpha = 0.1)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 ~ 2017-02-18) %>%
filter(accuracy>0) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 ~ 2017-02-18) %>%
filter(accuracy>0) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
head(all)
?time_filter()
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 00:00:00 ~ 2017-02-18+ 10:00:00) %>%
filter(accuracy>0) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 00:00:00 ~ 2017-02-18+ 10:00:00)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 00:00:00 ~ 2017-02-18+ 01:00:00)
all %>%
select(time,lat,lon,accuracy) %>%
mutate(time2 = lubridate::force_tz(time, "Asia/Singapore")) %>%
as_tbl_time(index = time2) %>%
time_filter(2017-02-18 + 00:00:00 ~ 2017-02-18+ 10:00:00)
t1 <- all %>%
select(time,lat,lon,accuracy) %>%
mutate(time2 = lubridate::force_tz(time, "Asia/Singapore")) %>%
as_tbl_time(index = time2) %>%
time_filter(2017-02-18 + 00:00:00 ~ 2017-02-18+ 10:00:00)
t1
tail(t1)
summary(t1$time2)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 00:00:00 ~ 2017-02-18+ 10:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 00:00:00 ~ 2017-02-18+ 01:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 00:00:00 ~ 2017-02-18+ 08:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 06:00:00 ~ 2017-02-18+ 08:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 06:00:00 ~ 2017-02-18+ 09:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 04:00:00 ~ 2017-02-18+ 09:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all<-readRDS("../../data/boaz/myLocationHistory.rds")
head(all)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 04:00:00 ~ 2017-02-18+ 09:00:00)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 08:00:00 ~ 2017-02-18+ 15:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 08:00:00 ~ 2017-02-18+ 15:00:00)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 08:00:00 ~ 2017-02-18+ 20:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-18 + 08:00:00 ~ 2017-02-18+ 20:00:00)
all<-readRDS("../../data/boaz/myLocationHistory.rds")
all$time<- lubridate::with_tz(all$time, "Europe/Budapest")
all
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 08:00:00 ~ 2017-02-15+ 20:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 05:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 08:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00)%>%
select(lat, lon) %>%
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00)%>%
select(lat, lon)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00)%>%
select(lat, lon)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00)%>%
select(lat, lon) %>%
sp::Line()
lns<- all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00)%>%
select(lat, lon) %>%
sp::Line()
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolylines(data = lns,color = "#DF2935")
lns
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolylines(data = lns,color = "#DF2935")
lns
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00)
lns
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet() %>%
addTiles() %>%
addPolylines(data = lns,color = "#DF2935") %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet() %>%
addTiles() %>%
addPolylines(data = lns,color = "#DF2935")
lns<- all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00)%>%
select(lon, lat) %>%
sp::Line()
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet() %>%
addTiles() %>%
addPolylines(data = lns,color = "#DF2935") %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet((options = leafletOptions(zoomControl = FALSE)) %>%
addTiles() %>%
addPolylines(data = lns,color = "#DF2935") %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet(options = leafletOptions(zoomControl = FALSE) %>%
addTiles() %>%
addPolylines(data = lns,color = "#DF2935") %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
addTiles() %>%
addPolylines(data = lns,color = "#DF2935") %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
all %>%
select(time,lat,lon,accuracy) %>%
filter(accuracy <400) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
addTiles() %>%
addPolylines(data = lns,color = "#DF2935") %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
lns<- all %>%
select(time,lat,lon,accuracy) %>%
filter(accuracy <400) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00)%>%
select(lon, lat) %>%
sp::Line()
all %>%
select(time,lat,lon,accuracy) %>%
filter(accuracy <400) %>%
as_tbl_time(index = time) %>%
time_filter(2017-02-15 + 00:00:00 ~ 2017-02-15+ 12:00:00) %>%
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
addTiles() %>%
addPolylines(data = lns,color = "#DF2935") %>%
addCircles(lng = ~lon, lat = ~lat,
radius = ~accuracy, fillOpacity = 0.02,color = "#DF2935")%>%
addProviderTiles(providers$CartoDB.Positron)
#image magick
library(magick)
inac <- image_read("img/inaccurate.png")
inac <- image_read("../img/inaccurate.png")
inac
ac <- image_read("../img/Rplot.png")
ac
ac %>%
image_montage(inac)
ac %>%
image_montage()
image_montage(ac)
image_montage(inac)
image_mosaic(inac)
image_mosaic()
inac %>%
image_mosaic()
inac %>%
image_mosaic() %>%
image_mosaic(ac)
image_mosaic(ac, inac)
bigdata <- image_read('https://jeroen.github.io/images/bigdata.jpg')
frink <- image_read("https://jeroen.github.io/images/frink.png")
logo <- image_read("https://www.r-project.org/logo/Rlogo.png")
img <- c(bigdata, logo, frink)
img
img <- image_scale(img, "300x300")
image_mosaic(img)
image_flatten(img)
left_to_right <- image_append(image_scale(img, "x200"))
image_background(left_to_right, "white", flatten = TRUE)
top_to_bottom <- image_append(image_scale(img, "100"), stack = TRUE)
image_background(top_to_bottom, "white", flatten = TRUE)
